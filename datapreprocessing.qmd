---
title: "Data Pre-Processing"
author: "Jeffery Lau, Hei Yee Kai, Jenna Cheo"
date-modified: "last-modified"
format: html
editor: visual
---

# 1 Page Overview

This page provides instructions on how to recreate the pre-processed datasets that power our Shiny Application. We have pre-processed these datasets ahead of time, which significantly reduces the loading time and complexity of the application, ensuring a smoother user experience.

# 2. Packages and Data

## 2.1 Packages Required

The following will be the packages used for this study and the Shiny Application:

```{r}
#| eval: false

pacman::p_load(sf, st, tidyverse, raster, tmap, tmaptools, ggplot2, gridExtra, spatstat, sfdep, spdep, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, GGally)
```

-   sf: For working with simple features, a standard for spatial data in R.
-   tidyverse: A collection of packages for data manipulation and visualization, including dplyr, tidyr, ggplot2, etc.
-   tmap: For creating static and interactive maps.
-   ggplot2: A powerful visualization package for creating static plots.
-   gridExtra: For arranging multiple plots on a single page.
-   sfdep: For spatial dependency analysis.
-   ClustGeo: For spatial clustering analysis.
-   cluster: For various clustering algorithms, including K-means and hierarchical clustering.
-   factoextra: For visualizing and evaluating clustering results.
-   NbClust: For determining the optimal number of clusters.
-   heatmaply: For creating interactive heatmaps.
-   corrplot: For visualizing correlation matrices.
-   GGally: For advanced data visualization, including pair plots and correlation plots.

## 2.2 Data Required

There are a total of 5 aspatial datasets used in this project.

-   [Malaysia – Crime by District and Crime Type](https://data.gov.my/data-catalogue/crime_district) from data.gov.my in csv format.

-   [Malaysia - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-mys) with included administrative regions in shapefile format.

-   [Malaysia – Annual Principal Labour Force Statistics by District](https://data.gov.my/data-catalogue/lfs_district) from data.gov.my in csv format.

-   [Malaysia – Poverty by Administrative District](https://data.gov.my/data-catalogue/hh_poverty_district) from data.gov.my in csv format.

-   [Malaysia – Income Inequality by District](https://data.gov.my/data-catalogue/hh_inequality_district) from data.gov.my in csv format.

-   [Malaysia – Population by District](https://data.gov.my/data-catalogue/population_district) from data.gov.my in csv format.

### 2.2.1 Aspatial Data

We start by importing the crime rate and population csv file into R.

```{r}
#| eval: false

crime_df <- read_csv("data/aspatial/crime_district.csv")
population_df <- read_csv("data/aspatial/population_district.csv")
```

### 2.2.2 Geospatial Data

Next, we import the administrative (Level 2, District) regions of Malaysia.

```{r}
#| eval: false

mys_sf <- read_sf(dsn = "data/geospatial/mys_adm_unhcr_20210211_shp", 
                 layer = "mys_admbnda_adm2_unhcr_20210211") %>%
          st_transform(crs = 3168)
```

### 2.2.3 Enrichment Data

We will also be importing and working we several other potentially related data to crime rates in Malaysia and uncover if there is any further insights which could be extracted from their usage. The following teh details of the fields:

1.  Poverty by District: Poverty rates by administrative district from 2019 to 2022

-   `poverty_absolute`: Proportion of households with monthly income below the Poverty Line Income (PLI)
-   `poverty_relative`: Proportion of households with monthly income below half the district median income

2.  Inequality by District: Gini coefficient by administrative district from 2019 to 2022.

-   `gini`: The Gini coefficient based on the distribution of households' gross monthly income

3.  Labour Force Statistics by District: Annual principal labour force statistics at district level, including unemployment and participation rates.

-   `lf`: The number (in thousands) of employed and unemployed individuals. This figure also represents the number of people participating in the labour force.
-   `lf_employed`: The number (in thousands) of people who worked at least one hour for pay, profit or family gain, in thousands of people
-   `lf_unemployed`: The number (in thousands) of people who did not work but were looking for work or available to work
-   `lf_outside`: The number (in thousands) of people not classified as employed or unemployed, including housewives, students, early retired, disabled persons and those not interested in looking for a job
-   `u_rate`: Ratio of unemployed to labour force size
-   `p_rate`: Ratio of the labour force size to the working-age (15-64) population
-   `ep_ratio`: Ratio of the number of employed people to the working-age (15-64) population

```{r}
#| eval: false

poverty_df <- read_csv("data/aspatial/poverty_district.csv")
inequality_df <- read_csv("data/aspatial/inequality_district.csv")
labour_df <- read_csv("data/aspatial/labour_district.csv")
```

## 2.3 Wrangling

Next we shall prepare our data for analysis, which includes proper mapping of data and joining for the aspatial datasets with the geospatial dataset.

### 2.3.1 Data Preparation

Before we can check the mappings we convert `state` and `district` to upper to ensure a smooth matching and join. We also extracted the year as a column since the aspatial data are all annual.

::: panel-tabset
#### Crime

Convert state and district to upper for matching

```{r}
#| eval: false

crime_df <- crime_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
```

#### Population

```{r}
#| eval: false

population_df <- population_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
```

#### Malaysia

```{r}
#| eval: false

mys_sf <- mys_sf %>%
          mutate(ADM1_EN = toupper(ADM1_EN),
                 ADM2_EN = toupper(ADM2_EN))
```
:::

### 2.3.2 State Mismatch

Next we check for any mismatch on ADM1 (State-level)

::: panel-tabset
#### Overview

```{r}
#| eval: false

print("Unique states in crime_df:")
unique(crime_df$state)

print("Unique states in population_df:")
unique(population_df$state)

print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)
```

At first glance we can see a mismatch in the length of the states.

#### Difference

```{r}
#| eval: false

state_crime <- unique(crime_df$state)
state_sf <- unique(mys_sf$ADM1_EN)

missing_in_sf <- setdiff(state_crime, state_sf)
missing_in_crime <- setdiff(state_sf, state_crime)

print("States in crime_df not found in mys_sf:")
print(missing_in_sf)

print("States in mys_sf not found in crime_df:")
print(missing_in_crime)
```

It seems like crime_df also have a row for the aggregated crime rates for the whole of Malaysia. Whereas W.P. LABUAN, W.P. PUTRAJAYA are not found in the spatial dataset.
:::

### 2.3.3 State Wrangling

For this project we will be focusing on West Malaysia, and thus will be filtering out Sarawak, Sabah and Labuan. To address the issue identified above we will be mapping: 'W.P. PUTRAJAYA' -\> 'KUALA LUMPUR'.

::: panel-tabset
#### Crime

```{r}
#| eval: false

crime_df <- crime_df %>%
              filter(state != 'MALAYSIA' & state != 'SABAH' & state != 'SARAWAK' & 
                     district != 'ALL' & type != 'all') %>%
              mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'))
```

#### Population

```{r}
#| eval: false

population_df <- population_df %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' &
                 sex == "both" & age == "overall" & ethnicity == "overall" ) %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR')) %>%
          dplyr::select(state, district, year, population)
```

#### Malaysia

```{r}
#| eval: false

mys_sf <- mys_sf %>%
          filter(ADM1_EN != 'W.P. LABUAN' & ADM1_EN != 'SABAH' & ADM1_EN != 'SARAWAK') %>%
          mutate(ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))
```
:::

::: callout-note
W.P. PUTRAJAYA -\> KUALA LUMPUR ??

It is noted that W.P. PUTRAJAYA is within SELANGOR but for the ease of joining with subsequent data it will mapped under KUALA LUMPUR state
:::

### 2.3.4 State-District Wrangling (Crime)

Next we will be wrangling the data on the district level, the methodology is similar as above: 1. Check difference of unique state_district 2. Address difference by mapping district not found within `mys_sf` into available districts 3. Aggregate the newly mapped variables under a similar district

#### 2.3.4.1 State-District Mismatch

```{r}
#| eval: false

crime_df <- crime_df %>% mutate(state_district = paste(state, district, sep = "-"))
mys_sf <- mys_sf %>% mutate(state_district = paste(ADM1_EN, ADM2_EN, sep = "-"))
```

```{r}
#| eval: false

state_district_crime <- unique(crime_df$state_district)
state_district_sf <- unique(mys_sf$state_district)

missing_in_sf <- setdiff(state_district_crime, state_district_sf)
missing_in_crime <- setdiff(state_district_sf, state_district_crime)

print("State-District combinations in crime_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in crime_df:")
print(missing_in_crime)
```

That is alot of mismatch! The process involves checking the available districts in `mys_sf` and assiging the districts.

#### 2.3.4.2 Re-Mapping Districts

After the team sat down to sort out the mapping this is the list of mapping to address the above mismatch.

```{r}
#| eval: false

crime_df <- crime_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district %in% c("ISKANDAR PUTERI", "NUSAJAYA", "JOHOR BAHRU SELATAN", "JOHOR BAHRU UTARA", "SERI ALAM") ~ "JOHOR BAHRU",
    state == "NEGERI SEMBILAN" & district == "NILAI" ~ "SEREMBAN",
    state == "KEDAH" & district == "BANDAR BHARU" ~ "BANDAR BAHARU",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PAHANG" & district == "KUALA LIPIS" ~ "LIPIS",
    state == "PERAK" & district  %in% c("BATU GAJAH", "IPOH") ~ "KINTA",
    state == "PERAK" & district == "GERIK" ~ "ULU PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "PENGKALAN HULU" ~ "ULU PERAK",
    state == "PERAK" & district %in% c("SELAMA", "TAIPING") ~ "LARUT DAN MATANG",
    state == "PERAK" & district == "SUNGAI SIPUT" ~ "KUALA KANGSAR",
    state == "PERAK" & district %in% c("TANJONG MALIM", "TAPAH") ~ "BATANG PADANG",
    state == "PERLIS" & district %in% c("ARAU", "KANGAR", "PADANG BESAR") ~ "PERLIS",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "SELANGOR" & district == "AMPANG JAYA" ~ "GOMBAK",
    state == "SELANGOR" & district == "HULU SELANGOR" ~ "ULU SELANGOR",
    state == "SELANGOR" & district == "KAJANG" ~ "ULU LANGAT",
    state == "SELANGOR" & district %in% c("KLANG SELATAN", "KLANG UTARA") ~ "KLANG",
    state == "SELANGOR" & district %in% c("PETALING JAYA", "SERDANG", "SG. BULOH", "SHAH ALAM", "SUBANG JAYA", "SUNGAI BULOH") ~ "PETALING",
    state == "KUALA LUMPUR" & district %in% c("BRICKFIELDS", "CHERAS", "DANG WANGI", "SENTUL", "WANGSA MAJU") ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year, category, type) %>%
  summarise(crimes = sum(crimes))
```

::: callout-note
##### Type of issues

1.  The common issue are related to translation, or districts with different names e.g. "PENGKALAN HULU" \~ "ULU PERAK"
2.  Some comes down to preferences e.g. "CAMERON HIGHLAND" \~ "CAMERON HIGHLANDS", "MANJUNG" \~ "MANJUNG (DINDING)",
3.  And in some cases a district may be broken down into sub-districts e.g. c("PETALING JAYA", "SERDANG", "SG. BULOH", "SHAH ALAM", "SUBANG JAYA", "SUNGAI BULOH") \~ "PETALING",
:::

#### 2.3.4.3 Crime Distribution

In the following we can see the distribution of crime rates (raw) on the map of West Malaysia. Note that the crime rates happens to be higher where the population is higher such as in Johor Bahru and Kuala Lumpur.

::: panel-tabset
##### Visualization

```{r}
#| eval: false

og_crime_df_mys <- crime_df %>%
  filter(year >= 2019 & year <= 2022) %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, geometry)

og_crime_df_mys <- st_as_sf(og_crime_df_mys)

og_crime_df_mys_grp <- og_crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes = sum(crimes)/4)

mys_map <- tm_shape(mys_sf) +
  tm_polygons(col = "lightgray", alpha = 0.3) +
  tm_text("ADM2_EN", size = 0.3) +
  tm_layout(main.title = "Districts (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(og_crime_df_mys_grp) +
  tm_fill("total_crimes", 
          style = "pretty", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(choro_map, mys_map, ncol = 2)
```
:::

::: callout-note
#### Missing Data (POKOK SENA)

Note the missing data in POKOK SENA in `crime_df`, which we will be rectifying in the subsequent join with the crime aggregated by KEDAH state
:::

### 2.3.5 State-District Wrangling (Population)

The crime data provided is not sufficient to paint an accurate picture of the crime patterns in Malaysia as it is heavily skewed towards places with higher population, this will not be ideal for our analysis, hence we will be importing Population by district to adjust the crime accordingly.

#### 2.3.5.1 State-District Mismatch

The data for population is only available from 2020 - 2024. Since 2019 is missing from data set, we will do a best effort mapping where year: 2020 -\> 2019.

```{r}
#| eval: false

population_row <- population_df %>%
  filter(year == 2020) %>%
  mutate(year = 2019) 
population_df <- bind_rows(population_df, population_row) %>% 
  mutate(state_district = paste(state, district, sep = "-"))
unique(population_df$year)
```

Next we check mismatch on the state-district.

```{r}
#| eval: false

state_district_population <- unique(population_df$state_district)

missing_in_sf <- setdiff(state_district_population, state_district_sf)
missing_in_population <- setdiff(state_district_sf, state_district_population)

print("State-District combinations in population_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in population_df:")
print(missing_in_population)
```

#### 2.3.5.2 Re-Mapping Districts

We employed the similar methodology to map the Population data.

```{r}
#| eval: false

population_df <- population_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "PULAU PINANG" & district == "SP SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SP TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SP UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(population = sum(population))

population_df
```

#### 2.3.5.3 Population Distribution

The following is a quick visualization of the population data in West Malaysia.

::: panel-tabset
##### Visualization

```{r}
#| eval: false

population_df_mys <- population_df %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, population, geometry)

population_df_mys <- st_as_sf(population_df_mys)

population_df_mys_grp <- population_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes = sum(population)/4)

mys_map <- tm_shape(mys_sf) +
  tm_polygons() +
  tm_text("ADM2_EN", size = 0.3) +
  tm_layout(main.title = "Districts (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(population_df_mys_grp) +
  tm_fill("total_crimes", 
          style = "pretty", 
          palette = "Blues",
          title = "Crimes") +
  tm_layout(main.title = "Population Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(choro_map, mys_map, ncol = 2)
```
:::

::: callout-note
#### Similarity in Observation

We can note that the districts with more crime tend to have a higher population we suggest it is positively correlated. Hence for a more accurate representation of crime rate we need to adjust the crimes to per captia (1000) for the districts.
:::

### 2.3.6 Joining

We will next perform join of the data on `crime_df` with `population_df` to normalize our crime data

#### 2.3.6.1 Join with Population Data

Here we compute the crimes per 1000 capita to ensure the data is normalized

```{r}
#| eval: false

crime_df_mys <- crime_df %>% 
  filter(year >= 2019 & year <= 2022) %>%
  left_join(population_df, by = c("state", "district", "year")) %>%
  mutate(crimes_pc = crimes/population) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population)
```

#### 2.3.6.2 Filling for `POKOK SENA` District

Given the missing data for `POKOK SENA`, we will be getting the state average for the district in this case the state of `KEDAH`

```{r}
#| eval: false

pokok_sena_rows <- crime_df_mys %>%
  filter(state == "KEDAH") %>%
  group_by(state, year, category, type) %>%
  summarise(crimes = mean(crimes),
            crimes_pc = mean(crimes_pc),
            population = mean(population)) %>% 
  mutate(district = "POKOK SENA")

pokok_sena_rows
crime_df_mys <- bind_rows(crime_df_mys, pokok_sena_rows)
```

#### 2.3.6.3 Join with District Boundary

We finish off the join with a join with our spatial dataset `mys_sf`.

```{r}
#| eval: false

crime_df_mys <- crime_df_mys %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population, geometry)

crime_df_mys <- st_as_sf(crime_df_mys)
crime_df_mys
```

### 2.3.7 Crime per Capita Distribution

```{r}
#| eval: false

crime_df_mys_grp <- crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes_pc = sum(crimes_pc)/4)

og_choro_map <- tm_shape(og_crime_df_mys_grp) +
  tm_fill("total_crimes", 
          n = 5,
          style = "equal", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(crime_df_mys_grp) +
  tm_fill("total_crimes_pc", 
          n = 5,
          style = "equal", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime per Capita Distribution",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(og_choro_map, choro_map, ncol = 2)
```

::: callout-note
#### Much better!

Note how much more insights we can extract from our adjusted crime choro plot. The district with population still seem to be higher in crime however we can also identify other clusters i.e. several cold spots in Kelantan etc.
:::

### 2.3.8 Correlation Plot

Next we take a quick look at how correlated the data are with across the various types of crimes

```{r}
#| eval: false

piv_crime_df_mys <- crime_df_mys %>%
  mutate(cat_type = paste(category, type, sep = "-")) %>%
  select(-category, -type, -crimes, -population) %>%
  pivot_wider(
    names_from = cat_type,
    values_from = crimes_pc,
    values_fill = 0
  ) 

corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:15]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

During the EDA we have noted that some crimes such as `robbery_gang_armed` tend are typically really low in record. Hence to further narrow our subsequent analysis we will group robbery as one category and vehicle theft as the other since they are highly correlated.

```{r}
#| eval: false

piv_crime_df_mys <- piv_crime_df_mys %>%
  mutate(
    robbery = `assault-robbery_gang_armed` + `assault-robbery_gang_unarmed` + 
              `assault-robbery_solo_armed` + `assault-robbery_solo_unarmed`,
    vehicle_theft = `property-theft_vehicle_lorry` + `property-theft_vehicle_motorcar` + 
                    `property-theft_vehicle_motorcycle`
  ) %>%
  select(-`assault-robbery_gang_armed`, -`assault-robbery_gang_unarmed`, 
         -`assault-robbery_solo_armed`, -`assault-robbery_solo_unarmed`,
         -`property-theft_vehicle_lorry`, -`property-theft_vehicle_motorcar`, 
         -`property-theft_vehicle_motorcycle`) %>%
  rename_with(~str_remove(., "^assault-|^property-"))

piv_crime_df_mys
```

The final crime type correlation matrix should look like the following.

```{r}
#| eval: false

corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:10]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

::: callout-note
#### Initial Analysis

Across the board it seems like only `robbery` have high correlation with `vehicle_theft`. However we will not be dropping either as they are key variables we would like extract insights from.
:::

## 2.4 Data Enrichment

To further enrich our analysis we will incoporate several socio-economic data which may potentially influence/affect crime rates such labour participation rates, poverty and income inequality by district

### 2.4.1 State Wrangling

```{r}
#| eval: false

print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)

print("Unique states in poverty_df:")
unique(poverty_df$state)

print("Unique states in inequality_df:")
unique(inequality_df$state)

print("Unique states in labour_df:")
unique(labour_df$state)
```

Similarly we prep the data by transforming the data and filtering out east Malaysia

```{r}
#| eval: false

poverty_df <- poverty_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

inequality_df <- inequality_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

labour_df <- labour_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK')
```

```{r}
#| eval: false

print("Unique states & years in mys_sf:")
sort(unique(mys_sf$ADM1_EN))

print("Unique states & years in poverty_df:")
sort(unique(poverty_df$state))
sort(unique(poverty_df$year))

print("Unique states & years in inequality_df:")
sort(unique(inequality_df$state))
sort(unique(inequality_df$year))

print("Unique states & years in labour_df:")
sort(unique(labour_df$state))
sort(unique(labour_df$year))
```

::: callout-note
#### Critical Data Issues

From the data we identified 2 issues: 1. Poverty and Inequality data is missing years 2020 and 2021 2. Labour data is missing PERLIS, KUALA LUMPUR and PUTRAJAYA
:::

### 2.4.2 State-District Wrangling (Poverty & Inequaltiy)

#### 2.4.2.1 Filling Year Data

Since years 2020 and 2021 are missing from data set, we will map to prior or the next year:

-   2020 -\> 2019

-   2021 -\> 2022

```{r}
#| eval: false

poverty_rows <- poverty_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
poverty_df <- bind_rows(poverty_df, poverty_rows)
unique(poverty_df$year)

inequality_rows <- inequality_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
inequality_df <- bind_rows(inequality_df, inequality_rows)
unique(inequality_df$year)
```

#### 2.4.2.2 State-District Mismatch

Similarly we will have to wrangle for District level too.

```{r}
#| eval: false

poverty_df <- poverty_df %>% mutate(state_district = paste(state, district, sep = "-"))
inequality_df <- inequality_df %>% mutate(state_district = paste(state, district, sep = "-"))
```

Since the data for inequality comes from the same ministry and the districts are the same we will only be checking for Poverty.

```{r}
#| eval: false

state_district_poverty <- unique(poverty_df$state_district)

missing_in_sf <- setdiff(state_district_poverty, state_district_sf)
missing_in_poverty <- setdiff(state_district_sf, state_district_poverty)

print("State-District combinations in poverty_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in poverty_df:")
print(missing_in_poverty)
```

#### 2.4.2.3 Re-Mapping Districts

This step is getting tedious, but still, very crucial.

```{r}
#| eval: false

poverty_df <- poverty_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(poverty_absolute = mean(poverty_absolute),
            poverty_relative = mean(poverty_relative))

poverty_df
```

```{r}
#| eval: false

inequality_df <- inequality_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(gini = mean(gini))

inequality_df
```

### 2.4.3 State-Distrcit Wrangling (Labour)

#### 2.4.3.1 State-District Mismatch

No change as with above.

```{r}
#| eval: false

labour_df <- labour_df %>% mutate(state_district = paste(state, district, sep = "-"))
```

```{r}
#| eval: false

state_district_labour <- unique(labour_df$state_district)

missing_in_sf <- setdiff(state_district_labour, state_district_sf)
missing_in_labour <- setdiff(state_district_sf, state_district_labour)

print("State-District combinations in labour_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in labour_df:")
print(missing_in_labour)
```

#### 2.4.3.2 Re-Mapping Districts

```{r}
#| eval: false

labour_df <- labour_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(lf = mean(lf),
            lf_employed = mean(lf_employed),
            lf_unemployed = mean(lf_unemployed),
            lf_outside = mean(lf_outside),
            p_rate = mean(p_rate),
            u_rate = mean(u_rate),
            ep_ratio = mean(ep_ratio))
```

::: callout-note
##### Missing labour data

However we do not have labour data for the following state-districts, hence we will be using the national average for:

1.  "PERLIS-PERLIS"

2.  "KUALA LUMPUR-WP. KUALA LUMPUR"

3.  "KUALA LUMPUR-W.P. PUTRAJAYA"
:::

### 2.4.4 Joining

#### 2.4.4.1 Join with Poverty, Inequality and Labour

We join the other aspatial data with our spatial crime dataframe.

```{r}
#| eval: false

piv_full_df_mys <- piv_crime_df_mys %>%
  left_join(poverty_df, by = c("state", "district", "year")) %>%
  left_join(inequality_df, by = c("state", "district", "year")) %>%
  left_join(labour_df, by = c("state", "district", "year")) %>%
  left_join(population_df, by = c("state", "district", "year"))

piv_full_df_mys
```

#### 2.4.4.2 Data Subsitution (Labour)

Similar to crime, labour force will also need to be adjusted to the districts population for a more accurate representation.

```{r}
#| eval: false

piv_full_df_mys <- piv_full_df_mys %>% 
  mutate(lf = lf/population,
         lf_employed = lf_employed/population,
         lf_unemployed = lf_unemployed/population,
         lf_outside = lf_outside/population) %>%
  select(-population)
```

Here we will be substituting the national average for the previously highlighted missing data from the labour dataset

```{r}
#| eval: false

target_states <- c("PERLIS", "KUALA LUMPUR")
target_districts <- c("PERLIS", "WP. KUALA LUMPUR", "W.P. PUTRAJAYA")

avg_values <- piv_full_df_mys %>%
  filter(!(state %in% target_states & district %in% target_districts)) %>%
  summarize(
    avg_lf = mean(lf, na.rm = TRUE),
    avg_lf_employed = mean(lf_employed, na.rm = TRUE),
    avg_lf_unemployed = mean(lf_unemployed, na.rm = TRUE),
    avg_lf_outside = mean(lf_outside, na.rm = TRUE),
    avg_p_rate = mean(p_rate, na.rm = TRUE),
    avg_u_rate = mean(u_rate, na.rm = TRUE),
    avg_ep_ratio = mean(ep_ratio, na.rm = TRUE)
  )

piv_full_df_mys <- piv_full_df_mys %>%
  mutate(
    lf = ifelse(state %in% target_states & district %in% target_districts & is.na(lf), avg_values$avg_lf, lf),
    lf_employed = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_employed), avg_values$avg_lf_employed, lf_employed),
    lf_unemployed = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_unemployed), avg_values$avg_lf_unemployed, lf_unemployed),
    lf_outside = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_outside), avg_values$avg_lf_outside, lf_outside),
    p_rate = ifelse(state %in% target_states & district %in% target_districts & is.na(p_rate), avg_values$avg_p_rate, p_rate),
    u_rate = ifelse(state %in% target_states & district %in% target_districts & is.na(u_rate), avg_values$avg_u_rate, u_rate),
    ep_ratio = ifelse(state %in% target_states & district %in% target_districts & is.na(ep_ratio), avg_values$avg_ep_ratio, ep_ratio)
  )
```

#### 2.4.4.3 Aggregate all Years

We will keep the year for filtering our application, hence we will also create an aggregate the data across the 4 years (2019 - 2022)

```{r}
#| eval: false

piv_full_df_mys_agg <- piv_full_df_mys %>%
  group_by(state, district) %>%
  summarise(year = 0,
            causing_injury = mean(causing_injury),
            murder = mean(murder),
            rape = mean(rape),
            robbery = mean(robbery),
            break_in = mean(break_in),
            theft_other = mean(theft_other),
            vehicle_theft = mean(vehicle_theft),
            poverty_absolute = mean(poverty_absolute),
            poverty_relative = mean(poverty_relative),
            gini = mean(gini),
            lf = mean(lf),
            lf_employed = mean(lf_employed),
            lf_unemployed = mean(lf_unemployed),
            lf_outside = mean(lf_outside),
            p_rate = mean(p_rate),
            u_rate = mean(u_rate),
            ep_ratio = mean(ep_ratio))


piv_full_df_mys <- bind_rows(piv_full_df_mys, piv_full_df_mys_agg)
unique(piv_full_df_mys$year)
```

## 2.5 Data Selection

To simplify our subsequent analysis and fine tune our clustering we will be checking for any highly correlated non-crime data and remove them for clustering.

### 2.5.1 Visualizing the Correlation of Data

```{r}
#| eval: false

corrplot.mixed(cor(st_drop_geometry(piv_full_df_mys %>% filter(year == 0))[, 4:20]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45,  # Slant the labels by 45 degrees
               tl.cex = 0.5)
```

### 2.5.2 Final Selection

Since the variable

1.  `ep_ratio` is highly correlated (\>0.8) with `lf`, `lf_employed`, `lf_outside` and `p_rate` we can drop them from the dataframe. (Employment ratio is much more intutive too)

2.  `u_rate` is highly correlated (\>0.8) with `lf_unemployed` we can drop it too.

```{r}
#| eval: false

piv_df_mys <- piv_full_df_mys %>%
  mutate(state_district = str_to_title(paste(state, district, sep = "-"))) %>%
  select(-lf, -lf_employed, -lf_unemployed, -lf_outside, -p_rate) %>%
  rename_with(~str_replace_all(., c("ep_ratio" = "employment_ratio", "u_rate" = "unemployment_rate"))) %>%
  select(state_district, everything())
  
colnames(piv_df_mys)
```

```{r}
#| eval: false

corrplot.mixed(cor(st_drop_geometry(piv_df_mys %>% filter(year == 0))[, 5:16]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45,
               tl.cex = 0.5)
```

Looks much better, now lets save it as `rds`.

```{r}
#| eval: false

write_rds(piv_df_mys, "./data/rds/pivot_df.rds")
```

```{r}
#| eval: false

piv_df_mys <- read_rds("./data/rds/pivot_df.rds")
```
